do
    local function not_an_iterable(iterable, level)
        error('object of type ' .. Class.nameof(iterable) .. ' is not an iterable', level)
    end

    function iter(iterable)
        local iter_func = iterable.__iter
        if iter_func then
            return iter_func(iterable)
        end
        
        not_an_iterable(iterable, 3)
    end

    local function enumerate_helper(state, index)
        -- 1 - iterator
        -- 2 - state of the iterator
        -- 3 - last value generated by the iterator
        local result = table.pack(state[1](state[2], state[3]))
        local value = result[1]
        if value ~= nil then
            state[3] = value
            return index + 1, table.unpack(result, 1, result.n)
        end
    end

    function enumerate(iterable, start)
        local iter_func = iterable.__iter
        if iter_func then
            return enumerate_helper, {iter_func(iterable)}, (start or 1) - 1
        end
        
        not_an_iterable(iterable, 3)
    end

end

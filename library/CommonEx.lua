function ExtendCommonPackage(common, Class, Interface, CB)
  --region Initialization
  common = common or _ENV.common or _ENV.Common
  Class = Class or _ENV.Class
  Interface = Interface or _ENV.Interface
  CB = CB or _ENV.CB or _ENV.CommonBases

  local common_ex = {}
  --endregion

  -- todo make enumerate as an Iterator
  local function enumerate_next(state, index)
    -- 1 - iterator function
    -- 2 - state of the iterator
    -- 3 - last value generated by the iterator
    local result = table.pack(state[1](state[2], state[3]))
    local value = result[1]
    if value ~= nil then
      state[3] = value
      return index + 1, table.unpack(result, 1, result.n)
    end
  end

  function common_ex.enumerate(start, iterator, state, init_value)
    return enumerate_next, {iterator, state, init_value}, (start or 1) - 1
  end

  for name, value in pairs(common_ex) do
    rawset(common, name, value)
  end
end
